# {{ ansible_managed }}
<VirtualHost *:{{ apache.port.http }}>
  ServerName {{ local_vhost.vhost }}
  # Force SSL
  Redirect permanent / https://{{ local_vhost.vhost }}
</VirtualHost>

<VirtualHost *:{{ apache.port.https }}>
  ServerName {{ local_vhost.vhost }}
  ServerAdmin {{ apache.admin }}
  Include /etc/apache2/vhosts.d/{{ local_vhost.vhost }}.conf

  DocumentRoot {{ local_vhost.docroot }}
  <Directory {{ local_vhost.docroot }}/>
    # Allow listing of folder contents
    Options Indexes FollowSymLinks -Multiviews
    Order deny,allow
    Allow from 127.0.0.1
  </Directory>

  # Allow the aliases
  <Directory />
    Options FollowSymLinks -Multiviews
    Order deny,allow
    Allow from 127.0.0.1
  </Directory>

  # @TODO optional separation of logs.
  CustomLog ${APACHE_LOG_DIR}/access.log combined
  ErrorLog ${APACHE_LOG_DIR}/error.log

  SSLEngine On
  SSLCertificateFile {{ local_vhost.ssl.certificate_file }}
  SSLCertificateKeyFile {{ local_vhost.ssl.certificate_key_file }}
{% if local_vhost.ssl.certificate_chain_file|default(false)|bool %}
  SSLCertificateChainFile {{ local_vhost.ssl.certificate_chain_file }}
{% endif %}

  # Set various options for the SSL engine.
  # o FakeBasicAuth:
  #   Translate the client X.509 into a Basic Authorisation.  This means that
  #   the standard Auth/DBMAuth methods can be used for access control.  The
  #   user name is the `one line' version of the client's X.509 certificate.
  #   Note that no password is obtained from the user. Every entry in the user
  #   file needs this password: `xxj31ZMTZzkVA'.
  # o ExportCertData:
  #   This exports two additional environment variables: SSL_CLIENT_CERT and
  #   SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
  #   server (always existing) and the client (only existing when client
  #   authentication is used). This can be used to import the certificates
  #   into CGI scripts.
  # o StdEnvVars:
  #   This exports the standard SSL/TLS related `SSL_*' environment variables.
  #   Per default this exportation is switched off for performance reasons,
  #   because the extraction step is an expensive operation and is usually
  #   useless for serving static content. So one usually enables the
  #   exportation for CGI and SSI requests only.
  # o StrictRequire:
  #   This denies access when "SSLRequireSSL" or "SSLRequire" applied even
  #   under a "Satisfy any" situation, i.e. when it applies access is denied
  #   and no other module can change it.
  # o OptRenegotiate:
  #   This enables optimized SSL connection renegotiation handling when SSL
  #   directives are used in per-directory context.
  SSLOptions +FakeBasicAuth +StrictRequire

  # SSL Protocol Adjustments:
  # The safe and default but still SSL/TLS standard compliant shutdown
  # approach is that mod_ssl sends the close notify alert but doesn't wait for
  # the close notify alert from client. When you need a different shutdown
  # approach you can use one of the following variables:
  # o ssl-unclean-shutdown:
  #   This forces an unclean shutdown when the connection is closed, i.e. no
  #   SSL close notify alert is send or allowed to received.  This violates
  #   the SSL/TLS standard but is needed for some brain-dead browsers. Use
  #   this when you receive I/O errors because of the standard approach where
  #   mod_ssl sends the close notify alert.
  # o ssl-accurate-shutdown:
  #   This forces an accurate shutdown when the connection is closed, i.e. a
  #   SSL close notify alert is send and mod_ssl waits for the close notify
  #   alert of the client. This is 100% SSL/TLS standard compliant, but in
  #   practice often causes hanging connections with brain-dead browsers. Use
  #   this only for browsers where you know that their SSL implementation
  #   works correctly.
  # Notice: Most problems of broken clients are also related to the HTTP
  # keep-alive facility, so you usually additionally want to disable
  # keep-alive for those clients, too. Use variable "nokeepalive" for this.
  # Similarly, one has to force some clients to use HTTP/1.0 to workaround
  # their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
  # "force-response-1.0" for this.
  BrowserMatch ".*MSIE.*" \
    nokeepalive ssl-unclean-shutdown \
    downgrade-1.0 force-response-1.0
</VirtualHost>
