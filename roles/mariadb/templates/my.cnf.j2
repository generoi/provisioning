# {{ ansible_managed }}
#
# For explanations see: http://dev.mysql.com/doc/mysql/en/server-system-variables.html
# Based on discussions in: https://groups.drupal.org/node/289613

[client]
port = {{ config.port }}
socket = {{ config.socket }}

[mysqld]
datadir = {{ config.db_datadir }}
default_storage_engine = InnoDB

# MyISAM
###

# Index blocks for MyISAM tables are buffered and are shared by all threads.
# key_buffer_size is the size of the buffer used for index blocks. The key
# buffer is also known as the key cache.
key_buffer_size = {{ config.key_buffer_size }}

myisam_recover = FORCE,BACKUP

# By default, MyISAM tables will INSERT into deleted row space before
# appending to the end of the disk. In exchange for saving this trivial
# amount of space, once a row gets deleted, only one insert operation
# may occur at a time until holes are filled. Setting concurrent_insert
# to 2 stops this silly behavior, at the cost of wasting a bit of disk
# space, for a significant performance improvement in MyISAM tables.
concurrent_insert = 2

# SAFETY
###

# This value by default is small, to catch large (possibly incorrect) packets.
# You must increase this value if you are using large BLOB columns or long strings. It
# should be as big as the largest BLOB you want to use
max_allowed_packet = {{ config.max_allowed_packet }}

# Prevent password brute force attack. Can cause “Host Blocked” error messages.
# Percona suggests should probably be set as large as your platform allows 1000000.
max_connect_errors = 1000000

# CACHES AND LIMITS
###

# tmp_table_size & max_heap_table_size are best set to the same size, because
# the size of temporary tables is limited by the lower of the two.
# Maximum size for internal (in-memory) temporary tables. If a table grows
# larger than this value, it is automatically converted to disk based table
# This limitation is for a single table. There can be many of them.
tmp_table_size = {{ config.tmp_table_size }}
max_heap_table_size = {{ config.max_heap_table_size }}

# 1 = default on, 0 = no query_chache, 2 = use SQL_CACHE switch in
# SQL-statement
query_cache_type = {{ config.query_cache_type }}

# This is the total available space for query_cache.
# Query cache is used to cache SELECT results and later return them without
# actual executing the same query once again. Having the query cache enabled
# may result in significant speed improvements, if your have a lot of identical
# queries and rarely changing tables.
# Note: In case your tables change very often or if your queries are textually
# different every time, the query cache may result in a slowdown instead of a
# performance improvement.  Enable query cache only if it is tested to provide
# significant gains Often causes stalls and contention.
#
# To view QC performance: SHOW GLOBAL STATUS LIKE 'Qc%'; then compute the read
# hit rate: Qcache_hits / Qcache_inserts If it is over, say, 5, the QC might be
# worth keeping.
query_cache_size = {{ config.query_cache_size }}

# Only cache result sets that are smaller than this limit. This is to protect
# the query cache of a very large result set overwriting all other query
# results.
query_cache_limit = {{ config.query_cache_limit }}

# "until you get 80% cache filled after mysql server has been running for 24h+.
# If this is a dedicated database server you can go nuts with this up to 70% of
# RAM, but if there is no queries to be cached this will be pretty useless.
# Better stay under 512M and use rest for memcached".
query_cache_min_res_unit = {{ config.query_cache_min_res_unit }}

# max_connections is how many connections your server will tolerate at once,
# while thread_cache_size is how many of these your server will cache. There is
# no reason not to set these to be an equal number
max_connections = {{ config.max_connections }}
thread_cache_size = {{ config.thread_cache_size }}

# MyISAM tables require up to 2 file handlers. Each connection is file handler
# too
open_files_limit = 65535

# InnoDB
###

# In theory, you want this to encompass your entire database. In
# practice, you only have so much RAM available
innodb_buffer_pool_size = {{ config.innodb_buffer_pool_size }}

# Reduce contention. Set to 4+ in MySQL 5.5+
innodb_buffer_pool_instances = 4

# O_DIRECT bypasses the operating system's handling of data. This can
# drastically improve how well your system handles large amounts of RAM by
# removing double buffers (once in InnoDB's cache, again in the filesystem's
# cache), at a slight cost to reliability. This appears to be more dramatic
# the more RAM you have. Should reduce swap pressure and in most cases
# improves performance.
#
# Be careful if you do not have battery backed up RAID cache as when write IO
# may suffer.
innodb_flush_method = O_DIRECT

# Supposedly, smaller is better because it makes recovery faster, even
# if larger means slightly better performance. I have no idea what the
# logic of this is - if @Vekseid has a crash, downtime is expected
innodb_log_files_in_group = 2

# Size of redo log file. Larger logs better performance but longer recovery.
# The size in bytes of each log file in a log group. The combined size of log
# files must be less than 4GB.
innodb_log_file_size = 256M

# Buffer for log files not only reduce writes but help contention.
# No reason to make the buffers too large, 4M is good for most cases
# unless you’re piping large blobs to Innodb in this case increase it a bit. 
innodb_log_buffer_size = 4M
innodb_additional_mem_pool_size = 4M

# Control Durability
# 1=flush and sync; 2=flush; 0=neither
# Setting innodb_flush_log_at_trx_commit to 0 causes InnoDB to only flush to
# disk once per second, improving performance considerably.
innodb_flush_log_at_trx_commit = {{ config.innodb_flush_log_at_trx_commit }}

# How long to wait for row level locks before bailing out.
innodb_lock_wait_timeout = 180

# There's no reason to waste time resolving domain names. 
# Faster & Safer. Do not use host names in GRANTs.
skip-name-resolve

# Logging
###

log_error= {{ config.log_error }}

# You can set this to non-integer numbers now. One second is rare enough for me
# that @vekseid consider it 'long'.
long_query_time = {{ config.long_query_time }}

{% if development %}
slow_query_log = 1
slow_query_log_file = {{ config.slow_query_log_file }}
{% else %}
slow_query_log = 0
{% endif %}

# Buffers
###

# Sort buffer is used to perform sorts for some ORDER BY and GROUP BY queries.
# If sorted data does not fit into the sort buffer, a disk based merge sort is
# used instead - See the "Sort_merge_passes" status variable. Allocated per
# thread if sort is needed. These two should both be the default values. If
# you are bulk-loading data from a script, you may want to increase
# bulk_insert_buffer_size to speed up operation.
bulk_insert_buffer_size  = 256M
myisam_sort_buffer_size  = 64M

# This buffer is used for the optimization of full JOINs (JOINs without
# indexes). Such JOINs are very bad for performance in most cases anyway, but
# setting this variable to a large value reduces the performance impact.
join_buffer_size = {{ config.join_buffer_size }}

# http://www.mysqlperformanceblog.com/2007/09/17/mysql-what-read_buffer_size-value-is-optimal/
read_buffer_size = {{ config.read_buffer_size }}
sort_buffer_size = {{ config.sort_buffer_size }}

# Buffer for reading rows in sorted offer, specifies Maximum Value.
# A rule-of-thumb is to allocate 1KB for each 1MB of memory on the server
read_rnd_buffer_size = {{ config.read_rnd_buffer_size }}

# The number of open tables for all threads. Increasing this value increases
# the number of file descriptors that mysqld requires.
table_cache = 4096

# The next two lines replace the basic table_cache value as of MySQL 5.1.
# table_definition_cache should be big enough for every table in your database,
# plus temporary tables, and table_open_cache should be a reflection of how
# many of these will be open in a live connection at once - it will likely
# exceed your definition cache.  It doesn't hurt to set these to large values.
# They don't take a lot of RAM and it's better than hitting the limit.
table_definition_cache = 4096
table_open_cache = 16384

# The default optimizer_search_depth is 62. This causes MySQL to take
# an obscene amount of time planning a query, though when it finally
# executes, it is pretty close to optimal. Since the vast majority of
# queries my software runs involve four or fewer relations, 
optimizer_search_depth = 4

# Drupal has been UTF8 for a long time, so let's state that explicitly.
character-set-server = utf8
collation-server = utf8_general_ci

interactive_timeout = 400
wait_timeout = 300
connect_timeout = 10

# Need adjustment if many connections/sec
back_log = 2048

open-files = 10000
query_prealloc_size = 65536
query_alloc_block_size = 131072

# http://dev.mysql.com/doc/refman/5.1/en/load-data-local.html
local-infile = 0
# This prevents granting access to stored procedures automatically just for
# creating them.
automatic_sp_privileges = 0
# safe-user-create prevents autocreating users with the GRANT statement unless
# the user has the insert privilege on mysql.user
safe-user-create = 1
# Remove skip-show-database if you use phpMyAdmin or a similar tool to manage
# your databases, it will just frustrate you or your users.
skip-show-database

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

[mysqld_safe]
pid-file={{ config.pid_file }}
open-files-lconfig.imit = 4096

[mysqldump]
quick
quote-names
max_allowed_packet = 16M
