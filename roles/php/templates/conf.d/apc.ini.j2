; {{ ansible_managed }}
extension = apc.so

apc.enabled = {{ php.apc.enabled|int }}

; The number of shared memory segments to allocate for the compiler cache. If APC
; is running out of shared memory but apc.shm_size is set as high as the system
; allows, raising this value might prevent APC from exhausting its memory.
apc.shm_segments = {{ php.apc.shm_segments }}

; The size of each shared memory segment in MB. By default, some systems
; (including most BSD variants) have very low limits on the size of a shared
; memory segment.
; Comment: Adjust this according to usage level on live.
apc.shm_size = {{ php.apc.shm_size }}

; A "hint" about the number of distinct source files that will be included or
; requested on your web server. Set to zero or omit if unsure; this setting is
; mainly useful for sites that have many thousands of source files.
; A big Drupal site uses approximately 2000-3000 files.
apc.num_files_hint = {{ php.apc.num_files_hint }}

; The number of seconds a cache entry is allowed to idle in a slot in case this
; cache entry slot is needed by another entry. Leaving this at zero means that
; APC's cache could potentially fill up with stale entries while newer entries
; won't be cached. In the event of a cache running out of available memory, the
; cache will be completely expunged if ttl is equal to 0. Otherwise, if the ttl
; is greater than 0, APC will attempt to remove expired entries.
apc.ttl = {{ php.apc.ttl }}

; The number of seconds a cache entry is allowed to idle in a slot in case this
; cache entry slot is needed by another entry. Leaving this at zero means that
; APC's cache could potentially fill up with stale entries while newer entries
; won't be cached. In the event of a cache running out of available memory, the
; cache will be completely expunged if ttl is equal to 0. Otherwise, if the ttl
; is greater than 0, APC will attempt to remove expired entries.
apc.user_ttl = {{ php.apc.user_ttl }}

; The number of seconds that a cache entry may remain on the garbage-collection
; list. This value provides a fail-safe in the event that a server process dies
; while executing a cached source file; if that source file is modified, the
; memory allocated for the old version will not be reclaimed until this TTL
; reached. Set to zero to disable this feature.
apc.gc_ttl = {{ php.apc.gc_ttl }}

; On by default, but can be set to off and used in conjunction with positive
; apc.filters so that files are only cached if matched by a positive filter.
apc.cache_by_default = {{ php.apc.cache_by_default }}

; A comma-separated list of POSIX extended regular expressions. If any pattern
; matches the source filename, the file will not be cached. Note that the
; filename used for matching is the one passed to include/require, not the
; absolute path. If the first character of the expression is a + then the
; expression will be additive in the sense that any files matched by the
; expression will be cached, and if the first character is a - then anything
; matched will not be cached. The - case is the default, so it can be left off.
apc.filters = {{ php.apc.filters }}

; If compiled with MMAP support by using --enable-mmap this is the mktemp-style
; file_mask to pass to the mmap module for determining whether your mmap'ed
; memory region is going to be file-backed or shared memory backed. For straight
; file-backed mmap, set it to something like /tmp/apc.XXXXXX (exactly 6 Xs). To
; use POSIX-style shm_open/mmap put a .shm somewhere in your mask. e.g.
; /apc.shm.XXXXXX You can also set it to /dev/zero to use your kernel's /dev/zero
; interface to anonymous mmap'ed memory. Leaving it undefined will force an
; anonymous mmap.
apc.mmap_file_mask = {{ php.apc.mmap_file_mask }}

; Prevent files larger than this value from getting cached. Defaults to 1M.
apc.max_file_size = {{ php.apc.max_file_size }}

; Be careful changing this setting. This defaults to on, forcing APC to stat
; (check) the script on each request to determine if it has been modified. If it
; has been modified it will recompile and cache the new version. If this setting
; is off, APC will not check, which usually means that to force APC to recheck
; files, the web server will have to be restarted or the cache will have to be
; manually cleared. Note that FastCGI web server configurations may not clear the
; cache on restart. On a production server where the script files rarely change,
; a significant performance boost can be achieved by disabled stats.  For
; included/required files this option applies as well, but note that for relative
; path includes (any path that doesn't start with / on Unix) APC has to check in
; order to uniquely identify the file. If you use absolute path includes APC can
; skip the stat and use that absolute path as the unique identifier for the file.
{% if php.development %}
apc.stat = 0
{% else %}
apc.stat = 1
{% endif %}

; On busy servers, when the web server is first started, or when many files have
; been modified at the same time, APC may try to compile and cache the same file
; multiple times. Write_lock guarantees that only one process will attempt to
; compile and cache an uncached script. The other processes attempting to use the
; script will run without using the opcode cache, rather than locking and waiting
; for the cache to prime.
apc.write_lock = {{ php.apc.write_lock }}

; Logs any scripts that were automatically excluded from being cached due to
; early/late binding issues.
apc.report_autofilter = {{ php.apc.report_autofilter }}

; Optimize include_once and require_once calls and avoid the expensive system
; calls used.
; This feature is EXPERIMENTAL. The behaviour of this directive, its name, and
; surrounding documentation may change without notice in a future release of
; APC. This feature should be used at your own risk.
apc.include_once_override  = {{ php.apc.include_once_override }}

